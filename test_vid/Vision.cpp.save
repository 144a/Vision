/* Vision.cpp from test_vid.cpp for FRC - Example 2-1 from OpenCV 
book

	 created 3/25/16 BD from test.cpp 
	 - from 3/23 version
	 - change to reading from video file and processing each frame
	 updated 3/27/16
	 - LATER, add command line for following:
	 - don't print if > threshold
	 - add angle
	 updated 1/21/17x
	 - pull template processing out of process()
	
	
	 info:
	 - to make OpenCV project, copy and edit CMakeLists.tst
	 $ cmake .
	 $ make
	
	 to run it:
	
	 bobd@HP-Mini:~/opencv/install_opencv/OpenCV/opencv-2.4.8/build$ ~/TechClub/2016/vision/opencv/test_vid/test_vid ~/TechClub/2016/p5_auto.mjpg 
*/

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <sys/time.h>
#include "Vision.h"
#include "HSV_Parallel.h"
#include "Thresh_Parallel.h"

Vision::Vision() 
{

  //extract green
	
	/*
	HMin = 35;
	HMax = 100;
	SMin = 70;
	SMax = 255;
	VMin = 40;
	VMax = 255;
	*/
	

	// White
	/*
	HMin = 0;
        HMax = 255;
        SMin = 0;
        SMax = 255;
        VMin = 240;
        VMax = 255;
	*/

	// H: 0-180
	// S: 0-255
	// V: 0-255

	
	//extract yellow
	HMin = 20;
	HMax = 35;
	SMin = 90;
	SMax = 255;
	VMin = 90;
	VMax = 255;
	
	
	displayf = 0;
	parallelf = 0;
	mosqf = 0;
	
	distance = 0.0;
	angle = 0.0;
}



int Vision::process_template(char *templateFile)
{
	// ok, now lets get ready to match template.jpg
	cv::Mat imgTemplate = cv::imread(templateFile, -1);
	if(imgTemplate.empty()) return -1;
	cv::cvtColor(imgTemplate, imgTemplate, CV_BGR2HSV);
	cv::inRange(imgTemplate, cv::Scalar(HMin, SMin, VMin), cv::Scalar(HMax, SMax, VMax), imgTemplate);
	cv::morphologyEx(imgTemplate, imgTemplate, CV_MOP_OPEN, cv::Mat());
	cv::findContours(imgTemplate, contoursTemplate, cv::noArray(), cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);
	if(displayf == 1) {
			cv::namedWindow("Template", cv::WINDOW_AUTOSIZE);
			cv::imshow("Template", imgTemplate);
			cv::waitKey(0);
	}


	return 0;

}

// find distance to target
double Vision::distance_calc_boiler(int width)
{
	distance = (-0.2555350554 * width + 24.3431734317);
	return distance;
}

// find angle to taret
double Vision::angle_calc_boiler(int xPos)
{
	angle = (atan((xPos-320.0)/530.47) * (180.0/M_PI));
	return angle; 
}
		
// find distance to target
double Vision::distance_calc_gear(int width)
{
	distance = (-0.2555350554 * width + 24.3431734317);
	return distance;
}

// find angle to taret
double Vision::angle_calc_gear(int xPos)
{
	angle = (atan((xPos-320.0)/530.47) * (180.0/M_PI));
	return angle; 
}
		
// find distance to target
double Vision::distance_calc_cube(int y)
{
	distance = 480.0 - y;
	return distance;
}

// find angle to taret
double Vision::angle_calc_cube(int xPos)
{
	// match sign of gyro
	angle = atan((xPos-320.0)/530.47) * (180.0/M_PI);
	return angle; 
}

// Added 16 to atan because too lazy to calibrate
double Vision::angle_calc_target(int xPos)
{
	angle = 16 + atan((xPos-320.0)/530.47) * (180.0/M_PI);
	return angle; 
}

// Added extra multiplicitive constant
double Vision::distance_calc_target(int width)
{
	distance = 6604.463483 * (1/double(width)) * 1.72413;
	return distance;
}


		
// return Linux time a long long microseconds
long long Vision::gettime_usec()
{
	struct timeval tv1;
	long long ret;
	
	gettimeofday(&tv1, NULL);
	ret = tv1.tv_sec * 1000000 + tv1.tv_usec;
	return ret;
}

void Vision::setParallel(int flag)
{
	parallelf = flag;
}

int Vision::process(cv::Mat img, cv::Mat &imgDraw, int filterf)
{
	// return:
	// 1 - if cube found
	// 0 - if not

	int ret = 0;

	printf("\n");
	// cv::Mat img = cv::imread(argv[1], -1);
	// if(img.empty()) return -1;
  
	if(displayf == 1) {
		cv::namedWindow("Input", cv::WINDOW_AUTOSIZE);
		cv::imshow("Input", img);
	}
	

	// Start Process Time
	long long tProcstart = gettime_usec();

	// first convert to HSV
	long long tHSVstart = gettime_usec();
	cv::Mat imgHSV =img.clone(); // faster to create and fill with zeros ?

	if(parallelf) {
		// actually, seemed to slow it down a little
		parallel_for_(cv::Range(0, 8), HSV_Parallel(img, imgHSV, CV_BGR2HSV, 8));
	} else {
		cv::cvtColor(img, imgHSV, CV_BGR2HSV);
	}

	long long tHSVend = gettime_usec();
	printf("HSV converison time: %lld usec\n", tHSVend - tHSVstart);

	// threshold image
	cv::Mat imgThresh = cv::Mat::zeros(imgHSV.rows, imgHSV.cols, CV_8U);
	
	long long tthreshstart = gettime_usec();
	// older version
	// cv::threshold(imgHSV, imgThresh, );

	if(parallelf) {
		// improvement - from ~2.7ms to 1.4ms - Yay!
		parallel_for_(cv::Range(0, 4), Thresh_Parallel(imgHSV, imgThresh, cv::Scalar(HMin, SMin, VMin),	cv::Scalar(HMax, SMax, VMax), 4));
	} else {
		// non-parallel version
		cv::inRange(imgHSV, cv::Scalar(HMin, SMin, VMin), cv::Scalar(HMax, SMax, VMax), imgThresh);
	}
	
	long long tthreshend = gettime_usec();
	
	printf("Threshold time: %lld usec\n", tthreshend - tthreshstart);
	if(displayf == 1) {
		cv::namedWindow("Threshold", cv::WINDOW_AUTOSIZE);
		cv::imshow("Threshold", imgThresh);
	}
	// erode and dilate
	long long tmorphstart = gettime_usec();
	// cloning imgThresh takes ~0.5 msec
	cv::Mat imgOpen;
	cv::Mat imgTemp2;
	if(parallelf) {
		// cloning imgThresh in here, and performing Open operation inplace increased from ~9.7msec to ~17.3msec
		// Wow! Just replacing morphologyEx Open operation with erode() followed by dilate() reduces Morphology step from ~9.6 msec to 2.4 msec!
		// Process time now around 21-23 msec
		cv::Mat imgTemp;
		// cv::erode(imgThresh, imgTemp, cv::Mat());
		// cv::dilate(imgTemp, imgTemp2, cv::Mat());
		cv::erode(imgThresh, imgTemp2, cv::Mat());
		cv::dilate(imgTemp2, imgOpen, cv::Mat());
		// cv::dilate(imgTemp, imgOpen, cv::Mat());		
	} else {
		cv::morphologyEx(imgThresh, imgOpen, CV_MOP_OPEN, cv::Mat());
	}
	long long tmorphend = gettime_usec();
	printf("Morphology time: %lld usec\n", tmorphend - tmorphstart);
	if(displayf == 1) {
		cv::namedWindow("Open", cv::WINDOW_AUTOSIZE);
		cv::imshow("Open", imgOpen);
	}

	// find countours
	// cv::Mat imgDraw(img);
	imgDraw = img;
	cv::Mat imgCont(imgOpen);
	contours.clear();
	long long tcontoursstart = gettime_usec();
	cv::findContours(imgCont, contours, cv::noArray(), cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);
	long long tcontoursend = gettime_usec();
	printf("Contour time: %lld usec\n", tcontoursend - tcontoursstart);
	imgCont = cv::Scalar::all(0);
	if(displayf == 1) {
		// cv::drawContours(imgDraw, contours, -1, cv::Scalar(0, 0, 255));
		// cv::waitKey(0);
	}

	moms.clear();
	rects.clear();

	printf("Found %d contours\n", contours.size());
	
	// New Code for 2020, super easy
	// We only have to deal with half a hexagon
	// Just looks for best match and then calculates angle
	// Will eventually add distance

	int fontFace = cv::FONT_HERSHEY_SIMPLEX;
	double fontScale = 0.5;
	char s1[255];
	cv::Point ptText(40, 40);
	float bestMatch = -1;
	double match = 0;
	int contnum = 0;
	for(int i = 0; i < contours.size(); i++) {
		/*
		match = cv::matchShapes(contoursTemplate[0], contours[i], CV_CONTOURS_MATCH_I3, 0);
		 if(match > bestMatch && match < 3) {
                        bestMatch = match;
                        contnum = i;
                }
if(match > bestMatch && match < 3) {
			bestMatch = match;
			contnum = i;
		}
		*/

	}
	
	
	printf("Best-y Match-y Thing-y: %6.2lf\n", bestMatch);
        if(bestMatch == -1) {
                imgDraw = img.clone();
                printf("No Match Found. Did you try turning it off and back on again?");
                if(displayf == 2) {
                        sprintf(s1, "Match: NONE");
	               	cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);
	
	                sprintf(s1, "Angle: UNKNOWN");
	                ptText.y += 15;
	                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

			sprintf(s1, "Distance: UNKNOWN");
                        ptText.y += 15;
                        cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

	                sprintf(s1, "NO IDEA HOW YOU SCREWED UP THIS BADLY");
	                ptText.y += 15;
	                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

	                cv::imshow("Contours", imgDraw);
	                cv::waitKey(1);

                }
                return 0;
        }

	// bounding rectangle
        cv::Rect rect1 = cv::boundingRect(contours[contnum]);

        printf("Angle of targets: %6.2lf\n", angle_calc_target(rect1.x + rect1.width / 2));
	printf("Distance of targets: %6.2lf\n", distance_calc_target(rect1.width));

	long long tProcend = gettime_usec();
	printf("Est. FPS: %6.2lf\n", 1000 / ((double(tProcend - tProcstart) / 1000) + 4));

        if(displayf == 2 || displayf == 1) {
          imgDraw = img.clone();
                cv::drawContours(imgDraw, contours, contnum, cv::Scalar(0, 0, 255));
                cv::rectangle(imgDraw, rect1, cv::Scalar(0, 255, 0));

                sprintf(s1, "Match: %6.2lf", bestMatch);
                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

                sprintf(s1, "Angle:  %6.2lf", angle_calc_target(rect1.x + rect1.width / 2));
                ptText.y += 15;
                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

		sprintf(s1, "Distance:  %6.2lf", distance_calc_target(rect1.width));
                ptText.y += 15;
                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

		sprintf(s1, "FPS:  %6.2lf", 1000 / ((double(tProcend - tProcstart) / 1000) + 4));
                ptText.y += 15;
                cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);

                cv::imshow("Contours", imgDraw);
                cv::waitKey(1);
        }



	/*
	if(contours.size() < 2) {
		printf("No match found. God hath mercy on us all.\n");
		imgDraw = img.clone();
		if(displayf > 0) {
			sprintf(s1, "Match: NONE");
			cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 

			sprintf(s1, "Angle: UNKNOWN");
			ptText.y += 15;
			cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 
		
			sprintf(s1, "NO IDEA HOW YOU SCREWED UP THIS BADLY");
			ptText.y += 15;
			cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);
		
			cv::imshow("Contours", imgDraw);
			cv::waitKey(1);
			return 0;
		}
	}
	
	// find bounding rectangle
	if(displayf == 1) {

		// cv::namedWindow("Contours", CV_WINDOW_NORMAL | CV_WINDOW_KEEPRATIO);
	  // cv::imshow("Contours", );
		// cv::waitKey(0);
	}

	// New code to match the combined contours
	// First, create a set of vectors of all combined contours
	// for both new image and template (should be done in
	// process_template(), but ill fix it later)
	std::vector<cv::Point> newContour;
	std::vector<cv::Point> newTemplateContour;
	newTemplateContour.insert(newTemplateContour.end(), contoursTemplate[0].begin(), contoursTemplate[0].end());
	newTemplateContour.insert(newTemplateContour.end(), contoursTemplate[1].begin(), contoursTemplate[1].end());
	double bestMatch = -1;
	double match = -1;
	int cont1 = -99;
	int cont2 = -99;
	double areaCont1;
	double areaCont2;
	bool areaCheck = false;

						 
	
	for(int i = 0; i < contours.size(); i++) {
		for(int j = 0; j < contours.size(); j++) {
			if(i != j) {
				newContour.clear();
				newContour.insert(newContour.end(), contours[i].begin(), contours[i].end());
				newContour.insert(newContour.end(), contours[j].begin(), contours[j].end());
				
				// Compare areas of the contour pair. If its greater than 50% similar, we allow the match
			  
				areaCont1 = contourArea(contours[i]);
				areaCont2	= contourArea(contours[j]);
				// printf("Area 1: %6.2lf\n", areaCont1 / areaCont2);
				// printf("Area 2: %6.2lf\n", areaCont2);
				if(areaCont1 >= areaCont2 && areaCont2 / areaCont1 > .5) {
					areaCheck = true;
				} else if(areaCont2 > areaCont1 && areaCont1 / areaCont2 > .5) {
					areaCheck = true;
				}

				if(areaCheck) {
					// compares sets of contours
					match = cv::matchShapes(newTemplateContour, newContour, CV_CONTOURS_MATCH_I3, 0);
					printf("Match-y Thing-y: %6.2lf\n", match);
				
					// Checks to see if match is "lit" - Caroline
					if((match < bestMatch && match < 3.0) || bestMatch == -1) {
						
						bestMatch = match;
						cont1 = i;
						cont2 = j;
					}
					// 
					if(displayf == 1) {
						imgDraw = img.clone();
						cv::drawContours(imgDraw, contours, i, cv::Scalar(0, 0, 255));
						cv::drawContours(imgDraw, contours, j, cv::Scalar(0, 0, 255));
						cv::imshow("Contours", imgDraw);
						cv::waitKey(0);
					}
				}
			}
		}
	}

	printf("Best-y Match-y Thing-y: %6.2lf\n", bestMatch);
  	if(bestMatch == -1) {
		imgDraw = img.clone();
		printf("No Match Found. Did you try turning it off and back on again?");
		if(displayf == 2) {
			sprintf(s1, "Match: NONE");
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 

		sprintf(s1, "Angle: UNKNOWN");
		ptText.y += 15;
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 
		
		sprintf(s1, "NO IDEA HOW YOU SCREWED UP THIS BADLY");
		ptText.y += 15;
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);
		
		cv::imshow("Contours", imgDraw);
		cv::waitKey(1);

		}
		return 0;
	}
	
	// bounding rectangle
	newContour.clear();
	newContour.insert(newContour.end(), contours[cont1].begin(), contours[cont1].end());
	newContour.insert(newContour.end(), contours[cont2].begin(), contours[cont2].end());
	cv::Rect rect1 = cv::boundingRect(newContour);
	
	printf("Angle of targets: %6.2lf\n", angle_calc_target(rect1.x + rect1.width / 2));
	
	if(displayf == 2 || displayf == 1) {
	  imgDraw = img.clone();
		cv::drawContours(imgDraw, contours, cont1, cv::Scalar(0, 0, 255));
		cv::drawContours(imgDraw, contours, cont2, cv::Scalar(0, 0, 255));
		cv::rectangle(imgDraw, rect1, cv::Scalar(0, 255, 0));
			
		sprintf(s1, "Match: %6.2lf", bestMatch);
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 

		sprintf(s1, "Angle:  %6.2lf", angle_calc_target(rect1.x + rect1.width / 2));
		ptText.y += 15;
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);
		
		cv::imshow("Contours", imgDraw);
		cv::waitKey(1);
	}
	*/
	



	/*
		long long tcontloopstart = gettime_usec();
		for(int i = 0; i < contours.size(); i++) {
		if(displayf) {
		imgDraw = img.clone();
		}

		// bounding rectangle
		
		cv::Rect rect1 = cv::boundingRect(contours[i]);
		if(displayf){
		cv::rectangle(imgDraw, rect1, cv::Scalar(0, 255, 0));
		// cv::rectangle(imgDraw, cv::boundingRect(contours[i]), cv::Scalar(255, 0, 0));
		}

		// minimum area (rotated) rectangle
		// cv::RotatedRect rect1 = cv::minAreaRect(contours[i]);

		rects.push_back(rect1);
		// removed this line when not dsiplaying
		// reduced Contour loop time from ~3.4 msec to 0.15 msec for 2 countours
		if(displayf) {
		// imgDraw = img.clone();
		}
			
		// compute Moments so we can find center of each contour (for printing for now)
		long long tmomentsstart = gettime_usec();
		cv::Moments mom1 = cv::moments(contours[i], true);
		long long tmomentsend = gettime_usec();
		printf("Moments time: %lld\n", tmomentsend - tmomentsstart);
		moms.push_back(mom1);
		cv::Point center(mom1.m10/mom1.m00, mom1.m01/mom1.m00);
		cv::Point ptText(center);
		
		
		// printf("m00: %lf m10: %lf m01: %lf x: %lf, y: %lf\n", mom1.m00, mom1.m10, mom1.m01,
		// mom1.m10/mom1.m00, mom1.m01/mom1.m00);
		
		printf("m00 (area): %6.2lf   h: %3d   w: %3d y: %3d\n", mom1.m00, rect1.height, rect1.width, rect1.y);

		
		// / *
		//  (>^-^)>-  - - - >         < ~ ~ ~  -<(^-^<)      
		// check match against template
		long long tmatchstart = gettime_usec();
		// following line is causing crashes
		double match = cv::matchShapes(contoursTemplate[0], contours[i], CV_CONTOURS_MATCH_I3, 0);
		long long tmatchend = gettime_usec();
		printf("Match Shapes time: %lld\n", tmatchend - tmatchstart);
		// * /

		
		// New code to match the combined contours
		// First, create a set of vectors of all combined contours
		// for both new image and template (should be done in
		// process_template(), but ill fix it later)
		std::vector<cv::Point> newContour;
		newContour.insert(newContour.end(), contours[i].begin(), contours[i].end());
		newContour.insert(newContour.end(), contours[i+1].begin(), contours[i+1].end());
		std::vector<cv::Point> newTemplateContour;
		newTemplateContour.insert(newTemplateContour.end(), contoursTemplate[0].begin(), contoursTemplate[0].end());
		newTemplateContour.insert(newTemplateContour.end(), contoursTemplate[1].begin(), contoursTemplate[1].end());
		
		
		long long tmatchstart = gettime_usec();
		// following line is causing crashes
		// double match = cv::matchShapes(contoursTemplate[0], contours[i], CV_CONTOURS_MATCH_I3, 0);

		// compares sets of contours
		double match = cv::matchShapes(newTemplateContour, newContour, CV_CONTOURS_MATCH_I3, 0);

		long long tmatchend = gettime_usec();
		printf("Match Shapes time: %lld\n", tmatchend - tmatchstart);
		
		
		int fontFace = cv::FONT_HERSHEY_SIMPLEX;
		double fontScale = 0.5;
		
		// double match = 0;
	       

		char s1[255];
		sprintf(s1, "#%d %0.2lf", i, match);
		printf("HELP ME PLEASE: %6.2lf\n", match);
	       
		
	     
		if(displayf){
		if((match <= 3.0)) {
			
		// sprintf(s1, "#%d %0.2lf", i, match);
		sprintf(s1, "#%d %0.2lf", i, rect1.area());
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 

		sprintf(s1, "x: %d", center.x);
		ptText.y += 15;
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1); 

		sprintf(s1, "y: %d", center.y);
		ptText.y += 15;
		cv::putText(imgDraw, s1, ptText, fontFace, fontScale, cv::Scalar(0, 0, 255), 1);
			
		// print distance from target to cli
		//printf("%d feet away\n", distance(240.0 - center.y));
			
		} else {
		cv::putText(imgDraw, s1, center, fontFace, fontScale, cv::Scalar(255, 255, 255), 2);
		}
		// cv::resizeWindow("Contours", 1280, 960); // didn't work, must not have Qt compiled in
		cv::imshow("Contours", imgDraw);
		cv::waitKey(0);
		}
	*/


	/*
		long long tcontloopend = gettime_usec();
		printf("Contour loop time: %lld usec\n", tcontloopend - tcontloopstart);

		if(contours.size() >= 1) {
		ret = filterCube();
		// cv::waitKey(0); // for testing, to pause here
	
		//cv::destroyAllWindows(); 
		}
	*/
	
	return ret;
}


int Vision::filterBoiler(void)
{
	// Filter Contours
	std::vector< cv::Rect > nrects;
	std::vector< cv::Moments > nmoms;

	for(int i = 0; i < moms.size(); i++) {
		if(moms[i].m00 >= 100.0) {
			nmoms.push_back(moms[i]);
			nrects.push_back(rects[i]);
			printf("Found it! Rects Size: %d\n", nrects.size());
		}
	}	
	
	// using indexes
	//	std::vector< cv::Rect > nrects;
	
	for(int i = 0; i < nrects.size(); i++) {
		for(int j = 0; j < nrects.size(); j++) {
			if(i != j) {
				double rat = (1.0 * nrects[j].height)/((1.0 * nrects[i].y - 0.5 * nrects[i].height) -
																							 (1.0 * nrects[j].y - 0.5 * nrects[j].height));
				printf("Nrects Ratio: %6.2lf\n", rat);
				if((rat > 0.4) &&	(rat < 0.7)) {
					printf("Good Nrects Ratio: %6.2lf top: %d bot: %d\n", rat, j, i);
					rects.clear();
					rects.push_back(nrects[i]);
					rects.push_back(nrects[j]);
					printf("Rects Size: %d\n", rects.size());
				}
			}
		}
	}
	
	if(contours.size() >= 1){
		double y[2];
		y[0] = 1.0 * rects[0].y;
		y[1] = 1.0 * rects[1].y;
		distance_calc_boiler(rects[0].width);
		angle_calc_boiler(rects[0].x);
		printf("distance!?!: %6.2lf\n", distance);
		printf("ratio: %6.2lf   %6.2lf %6.2lf\n", (1.0 * rects[1].height)/(y[0] - y[1]), y[0], y[1]);
		printf("angleish: %6.2lf %d %d\n", angle, rects[0].x, rects[0].x);
		
		//printf("m00: %6.2lf   h: %3d   w: %3d\n", moms[0].m00 , rects[0].height, rects[0].width);
	}
	
	return 0;
}

int Vision::filterGear(void)
{
	// Filter Contours
	std::vector< cv::Rect > nrects;
	std::vector< cv::Moments > nmoms;
	
	for(int i = 0; i < moms.size(); i++) {
		if(moms[i].m00 >= 100.0) {
			nmoms.push_back(moms[i]);
			nrects.push_back(rects[i]);
			printf("Found it! Rects Size: %d\n", nrects.size());
		}
	}
	
	for(int i = 0; i < nrects.size(); i++) {
		for(int j = 0; j < nrects.size(); j++) {
			if(i!=j) {
				if(abs(nrects[i].width - nrects[j].width) < 10) {
					rects.clear();
					rects.push_back(nrects[i]);
					rects.push_back(nrects[j]);
				}
			}
		}
	}
	
	if(contours.size() >= 1){

		distance_calc_gear(abs(rects[0].x - rects[1].x));
		angle_calc_gear((rects[0].x + rects[1].x) / 2.0);
		printf("distance!?!: %6.2lf\n", distance);
		printf("angleish: %6.2lf %d %d\n", angle);


	}

	return 0;
	
}

int Vision::filterCube(void)
{
	// Filter Contours
	// return:
	// 0 - if cube not found
	// 1 - if cube found
	// for now, returns 1 as long as contours were found
	
	int idxMaxArea = -1;
	double MaxArea = -1;
	int ret = 0;
	
	for(int i = 0; i < moms.size(); i++) {
		if(moms[i].m00 > MaxArea) {
			idxMaxArea = i;
			MaxArea = moms[i].m00;
		}
	}
	
	if(idxMaxArea != -1) {
		printf("Found it! Area: %8.1lf  Rect area:%8.1lf\n",
					 MaxArea, 1.0 * rects[idxMaxArea].height * rects[idxMaxArea].width);

		if(contours.size() >= 1){
			// use bottom of cube for distance
			printf("y: %d  height: %d\n", rects[idxMaxArea].y, rects[idxMaxArea].height);
			distance_calc_cube(rects[idxMaxArea].y + rects[idxMaxArea].height);
			// use left-right center of cube for angle calculation
			angle_calc_cube(rects[idxMaxArea].x + rects[idxMaxArea].width/2);
			printf("distance!?!: %6.2lf\n", distance);
			printf("angleish: %6.2lf\n", angle);
			ret = 1;
		}
	}

	return ret;
}
